{
  "version": 3,
  "sources": ["../../simple-zustand-devtools/src/index.tsx"],
  "sourcesContent": ["import React, { useEffect, useRef } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { UseStore } from 'zustand';\n\nexport function mountStoreDevtool<T extends object = Record<string | number | symbol, any>>(\n  storeName: string,\n  store: UseStore<T>,\n  rootElement?: HTMLElement\n) {\n  type StoreState = ReturnType<UseStore<T>['getState']>;\n\n  const externalUpdates = {\n    count: 0,\n  };\n\n  const ZustandDevtool: React.FC<StoreState> = props => {\n    const allUpdatesCount = useRef(externalUpdates.count);\n\n    useEffect(() => {\n      allUpdatesCount.current += 1;\n      if (allUpdatesCount.current === externalUpdates.count + 1) {\n        allUpdatesCount.current -= 1;\n\n        // DevTools update\n        store.setState(props);\n      }\n    });\n\n    return null;\n  };\n\n  (ZustandDevtool as any).displayName = `((${storeName})) devtool`;\n  \n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (!rootElement) {\n    let root = document.getElementById(`simple-zustand-devtools-${storeName}`);\n    if (!root) {\n      root = document.createElement('div');\n      root.id = `simple-zustand-devtools-${storeName}`;\n    }\n\n    document.body.appendChild(root);\n    rootElement = root;\n  }\n  const newRoot = createRoot(rootElement)\n  const renderDevtool = (state: StoreState | void) => {\n    if (!state) {\n      return;\n    }\n    newRoot.render(<ZustandDevtool {...state} />);\n    externalUpdates.count += 1;\n  };\n\n  renderDevtool(store.getState());\n  store.subscribe(renderDevtool);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;SAIgBA,EACdC,IACAC,GACAC,GAAAA;AAIA,QAAMC,IAAkB,EACtBC,OAAO,EAAA,GAGHC,IAAuCC,CAAAA,OAAAA;AAC3C,UAAMC,SAAkBC,aAAAA,QAAOL,EAAgBC,KAAAA;AAY/C,eAVAK,aAAAA,WAAU,MAAA;AACRF,MAAAA,GAAgBG,WAAW,GACvBH,GAAgBG,YAAYP,EAAgBC,QAAQ,MACtDG,GAAgBG,WAAW,GAG3BT,EAAMU,SAASL,EAAAA;IAAAA,CAAAA,GAIZ;EAAA;AAKT,MAFCD,EAAuBO,cAAAA,KAAmBZ,EAAAA,cAEnB,eAAA,OAAba;AACT;AAGF,MAAA,CAAKX,GAAa;AAChB,QAAIY,KAAOD,SAASE,eAAAA,2BAA0Cf,EAAAA,EAAAA;AACzDc,IAAAA,OACHA,KAAOD,SAASG,cAAc,KAAA,GAC9BF,GAAKG,KAAAA,2BAAgCjB,EAAAA,KAGvCa,SAASK,KAAKC,YAAYL,EAAAA,GAC1BZ,IAAcY;EAAAA;AAEhB,QAAMM,QAAUC,cAAAA,YAAWnB,CAAAA,GACrBoB,IAAiBC,CAAAA,OAAAA;AAChBA,IAAAA,OAGLH,EAAQI,OAAOC,aAAAA,QAAAA,cAACpB,GAAAA,OAAAA,OAAAA,CAAAA,GAAmBkB,EAAAA,CAAAA,CAAAA,GACnCpB,EAAgBC,SAAS;EAAA;AAG3BkB,IAAcrB,EAAMyB,SAAAA,CAAAA,GACpBzB,EAAM0B,UAAUL,CAAAA;AAAAA;",
  "names": ["mountStoreDevtool", "storeName", "store", "rootElement", "externalUpdates", "count", "ZustandDevtool", "props", "allUpdatesCount", "useRef", "useEffect", "current", "setState", "displayName", "document", "root", "getElementById", "createElement", "id", "body", "appendChild", "newRoot", "createRoot", "renderDevtool", "state", "render", "React", "getState", "subscribe"]
}
